
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Exercise } from "@/types";
import { toast } from "sonner";

interface ExerciseFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSave: (exercise: Exercise) => void;
  initialExercise?: Exercise;
}

const defaultExercise: Omit<Exercise, "id"> = {
  name: "",
  description: "",
  category: "strength",
  difficulty: "medium",
  parameters: {
    repetitions: undefined,
    sets: undefined,
    duration: 15,
    intensity: "medium",
  },
  notes: "",
};

export default function ExerciseForm({
  open,
  onOpenChange,
  onSave,
  initialExercise,
}: ExerciseFormProps) {
  const [exercise, setExercise] = useState<Omit<Exercise, "id">>({ ...defaultExercise });
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  // Reset form when dialog opens or initialExercise changes
  useEffect(() => {
    if (initialExercise) {
      setExercise(initialExercise);
    } else {
      setExercise({ ...defaultExercise });
    }
    setErrors({});
  }, [open, initialExercise]);
  
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    
    if (name.startsWith("parameters.")) {
      const paramName = name.split(".")[1];
      setExercise({
        ...exercise,
        parameters: {
          ...exercise.parameters,
          [paramName]: value === "" ? undefined : Number(value),
        },
      });
    } else {
      setExercise({ ...exercise, [name]: value });
    }
    
    // Clear error when field is changed
    if (errors[name]) {
      setErrors({ ...errors, [name]: "" });
    }
  };
  
  const handleSelectChange = (name: string, value: string) => {
    if (name.startsWith("parameters.")) {
      const paramName = name.split(".")[1];
      setExercise({
        ...exercise,
        parameters: {
          ...exercise.parameters,
          [paramName]: value,
        },
      });
    } else {
      setExercise({ ...exercise, [name]: value });
    }
    
    // Clear error when field is changed
    if (errors[name]) {
      setErrors({ ...errors, [name]: "" });
    }
  };
  
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!exercise.name.trim()) {
      newErrors.name = "Name is required";
    }
    
    if (!exercise.description.trim()) {
      newErrors.description = "Description is required";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error("Please fix the form errors");
      return;
    }
    
    if (initialExercise) {
      onSave({ ...exercise, id: initialExercise.id } as Exercise);
    } else {
      // In a real app, the ID would be generated by the backend
      const newExercise: Exercise = {
        ...exercise,
        id: `e${Date.now()}`,
      } as Exercise;
      onSave(newExercise);
    }
    
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[550px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {initialExercise ? "Edit Exercise" : "Create New Exercise"}
          </DialogTitle>
          <DialogDescription>
            {initialExercise
              ? "Update the exercise details below."
              : "Fill out the form below to create a new exercise."}
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-6 py-4">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">
                Exercise Name <span className="text-destructive">*</span>
              </Label>
              <Input
                id="name"
                name="name"
                value={exercise.name}
                onChange={handleChange}
                className={errors.name ? "border-destructive" : ""}
              />
              {errors.name && (
                <p className="text-xs text-destructive">{errors.name}</p>
              )}
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="category">
                  Category <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={exercise.category}
                  onValueChange={(value) => handleSelectChange("category", value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="strength">Strength</SelectItem>
                    <SelectItem value="cardio">Cardio</SelectItem>
                    <SelectItem value="flexibility">Flexibility</SelectItem>
                    <SelectItem value="balance">Balance</SelectItem>
                    <SelectItem value="rehabilitation">Rehabilitation</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="difficulty">
                  Difficulty Level <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={exercise.difficulty}
                  onValueChange={(value) => handleSelectChange("difficulty", value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select difficulty" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">Easy</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Hard</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="description">
                Description <span className="text-destructive">*</span>
              </Label>
              <Textarea
                id="description"
                name="description"
                value={exercise.description}
                onChange={handleChange}
                rows={3}
                className={errors.description ? "border-destructive" : ""}
              />
              {errors.description && (
                <p className="text-xs text-destructive">{errors.description}</p>
              )}
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="parameters.sets">Sets</Label>
                <Input
                  id="parameters.sets"
                  name="parameters.sets"
                  type="number"
                  min="1"
                  max="10"
                  value={exercise.parameters.sets || ""}
                  onChange={handleChange}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="parameters.repetitions">Repetitions</Label>
                <Input
                  id="parameters.repetitions"
                  name="parameters.repetitions"
                  type="number"
                  min="1"
                  max="100"
                  value={exercise.parameters.repetitions || ""}
                  onChange={handleChange}
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="parameters.duration">
                  Duration (minutes)
                </Label>
                <Input
                  id="parameters.duration"
                  name="parameters.duration"
                  type="number"
                  min="1"
                  max="120"
                  value={exercise.parameters.duration || ""}
                  onChange={handleChange}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="parameters.intensity">Intensity</Label>
                <Select
                  value={exercise.parameters.intensity || "medium"}
                  onValueChange={(value) => handleSelectChange("parameters.intensity", value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select intensity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="notes">Additional Notes</Label>
              <Textarea
                id="notes"
                name="notes"
                value={exercise.notes || ""}
                onChange={handleChange}
                rows={2}
                placeholder="Any additional instructions or guidelines..."
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit">
              {initialExercise ? "Update Exercise" : "Create Exercise"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
