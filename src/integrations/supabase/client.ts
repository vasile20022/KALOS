
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Patient } from '@/types';

const SUPABASE_URL = "https://tuqvfblugumqqljoqqou.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1cXZmYmx1Z3VtcXFsam9xcW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE2ODczNzksImV4cCI6MjA1NzI2MzM3OX0.Z_r5UM2LCW4yW1DOBSS34oPUIYn0ioE2MY4I6ARYkrQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type for client_profiles table, which isn't in our generated types yet
interface ClientProfile {
  id: string;
  name: string;
  surname: string;
  age: number;
  weight: number;
  height: number;
  fitness_level: string;
  limitations: string[] | null;
  notes: string | null;
  created_at: string;
  created_by: string | null;
  coach_id: string | null;
}

/**
 * Converts a ClientProfile from the database to a Patient type used in the frontend
 */
const mapClientProfileToPatient = (profile: ClientProfile): Patient => {
  return {
    id: profile.id,
    name: profile.name,
    surname: profile.surname,
    age: profile.age,
    weight: profile.weight,
    height: profile.height,
    fitnessLevel: profile.fitness_level as "beginner" | "intermediate" | "advanced",
    limitations: profile.limitations || [],
    notes: profile.notes || '',
    createdAt: new Date(profile.created_at),
    createdBy: profile.created_by || '',
    coachId: profile.coach_id
  };
};

// Helper function for getting user profile from Supabase
export const getClientProfile = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('client_profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) {
      console.error('Error fetching client profile:', error);
      return null;
    }
    
    if (!data) return null;
    
    // Cast data to our ClientProfile type and map to Patient
    return mapClientProfileToPatient(data as ClientProfile);
  } catch (error) {
    console.error('Error fetching client profile:', error);
    return null;
  }
};

// Helper function for updating user profile in Supabase
export const updateClientProfile = async (userId: string, profileData: any) => {
  try {
    // Get user data to set as coach if applicable
    const { data: userData } = await supabase.auth.getUser();
    
    const updateData = {
      name: profileData.name,
      surname: profileData.surname,
      age: profileData.age,
      weight: profileData.weight,
      height: profileData.height,
      fitness_level: profileData.fitnessLevel,
      limitations: profileData.limitations || [],
      notes: profileData.notes || '',
      coach_id: profileData.coachId || userData.user?.id || null
    };
    
    const { data, error } = await supabase
      .from('client_profiles')
      .update(updateData)
      .eq('id', userId)
      .select()
      .single();
    
    if (error) {
      console.error('Error updating client profile:', error);
      return { success: false, error: error.message };
    }
    
    if (!data) {
      return { success: false, error: 'No data returned after update' };
    }
    
    // Map to our Patient type
    const patient = mapClientProfileToPatient(data as ClientProfile);
    
    return { 
      success: true, 
      data: patient
    };
  } catch (error) {
    console.error('Error updating client profile:', error);
    return { success: false, error: 'Failed to update profile' };
  }
};

// Helper function to create a new client profile
export const createClientProfile = async (profileData: Omit<Patient, 'id' | 'createdAt'>) => {
  try {
    const { data: userData } = await supabase.auth.getUser();
    const userId = userData.user?.id;
    
    if (!userId) {
      return { success: false, error: 'User not authenticated' };
    }
    
    const newProfile = {
      name: profileData.name,
      surname: profileData.surname,
      age: profileData.age,
      weight: profileData.weight,
      height: profileData.height,
      fitness_level: profileData.fitnessLevel,
      limitations: profileData.limitations || [],
      notes: profileData.notes || '',
      created_by: userId,
      coach_id: profileData.coachId || userId // Set the coach_id to the current user's ID if not specified
    };
    
    console.log('Creating new client profile with data:', newProfile);
    
    const { data, error } = await supabase
      .from('client_profiles')
      .insert(newProfile)
      .select()
      .single();
    
    if (error) {
      console.error('Error creating client profile:', error);
      return { success: false, error: error.message };
    }
    
    if (!data) {
      return { success: false, error: 'No data returned after insert' };
    }
    
    // Map to our Patient type
    const patient = mapClientProfileToPatient(data as ClientProfile);
    
    return { 
      success: true, 
      data: patient
    };
  } catch (error) {
    console.error('Error creating client profile:', error);
    return { success: false, error: 'Failed to create profile' };
  }
};

// Helper function to get all client profiles for a coach
export const getClientProfiles = async () => {
  try {
    const { data: userData } = await supabase.auth.getUser();
    if (!userData.user) {
      return [];
    }

    const { data, error } = await supabase
      .from('client_profiles')
      .select('*')
      .or(`created_by.eq.${userData.user.id},coach_id.eq.${userData.user.id}`);
    
    if (error) {
      console.error('Error fetching client profiles:', error);
      return [];
    }
    
    if (!data) return [];
    
    // Map the data to our Patient type
    return data.map((item: any) => mapClientProfileToPatient(item as ClientProfile));
  } catch (error) {
    console.error('Error fetching client profiles:', error);
    return [];
  }
};

// Helper function to delete a client profile
export const deleteClientProfile = async (clientId: string) => {
  try {
    const { error } = await supabase
      .from('client_profiles')
      .delete()
      .eq('id', clientId);
    
    if (error) {
      console.error('Error deleting client profile:', error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error deleting client profile:', error);
    return false;
  }
};
